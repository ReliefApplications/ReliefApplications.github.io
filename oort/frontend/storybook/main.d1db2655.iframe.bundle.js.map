{"version":3,"file":"main.d1db2655.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;AAYA;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;AAgBA;;;;AAAA;;;;;;;;;;;;;AAgBA;;;;;;;AAUA;;;;;;AASA;;;;;;;;;;;;;;;AAkBA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;;;;;;;;;;;;;;;;;;;;AAPA;;;;AAOA;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAUA;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;AAgBA;;;;;;AAAA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;AASA;;;;;;;;;;AAaA;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;AAYA;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvmBA;;;;;;;AASA;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;;;;;;;;;;;;;;;;;;;AA7CA;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;;;;;;;;;;;;;;;;;AAyCA;;;;;;;AAXA;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpmBA;;;;;;;;;;;;;;;;;;;;ACjGA;;;;;;;AAtBA;;;;;;;;AAyCA;;;;;;;;;;;;;;;;;;ACwLA;;;;;;;;;;;AAWA;;;;;;;AAeA;;AAKA;AACA;;;AAIA;;AAuCA;;;;AAKA","sources":["webpack://oort-front/./projects/safe/src/lib/graphql/mutations.ts","webpack://oort-front/./projects/safe/src/lib/graphql/queries.ts","webpack://oort-front/./projects/safe/src/lib/services/aggregation-builder.service.ts","webpack://oort-front/./projects/safe/src/lib/graphql/subscriptions.ts","webpack://oort-front/./projects/safe/src/lib/services/query-builder.service.ts"],"sourcesContent":["import { gql } from 'apollo-angular';\n// === EDIT RECORD ===\n/** Graphql request for editing a record by its id */\nexport const EDIT_RECORD = gql `\n  mutation editRecord(\n    $id: ID!\n    $data: JSON\n    $version: ID\n    $template: ID\n    $display: Boolean\n  ) {\n    editRecord(id: $id, data: $data, version: $version, template: $template) {\n      id\n      data(display: $display)\n      createdAt\n      modifiedAt\n      createdBy {\n        name\n      }\n    }\n  }\n`;\n// === EDIT RECORDS ===\n/** Graphql request for editing multiple records by their ids */\nexport const EDIT_RECORDS = gql `\n  mutation editRecords($ids: [ID]!, $data: JSON!, $template: ID) {\n    editRecords(ids: $ids, data: $data, template: $template) {\n      id\n      data\n      createdAt\n      modifiedAt\n    }\n  }\n`;\n// === CONVERT RECORD ===\n/** Graphql request for converting a record with its id and its form id */\nexport const CONVERT_RECORD = gql `\n  mutation convertRecord($id: ID!, $form: ID!, $copyRecord: Boolean!) {\n    convertRecord(id: $id, form: $form, copyRecord: $copyRecord) {\n      id\n      createdAt\n      modifiedAt\n    }\n  }\n`;\n// === ADD RECORD ===\n/** Graphql request for adding a new record to a form */\nexport const ADD_RECORD = gql `\n  mutation addRecord($form: ID!, $data: JSON!, $display: Boolean) {\n    addRecord(form: $form, data: $data) {\n      id\n      createdAt\n      modifiedAt\n      createdBy {\n        name\n      }\n      data(display: $display)\n      form {\n        uniqueRecord {\n          id\n          modifiedAt\n          createdBy {\n            name\n          }\n          data\n        }\n      }\n    }\n  }\n`;\n// === UPLOAD FILE ===\n/** Graphql request for uploading a file to a form */\nexport const UPLOAD_FILE = gql `\n  mutation uploadFile($file: Upload!, $form: ID!) {\n    uploadFile(file: $file, form: $form)\n  }\n`;\n// === EDIT USER ===\n/** Graphql request for editing roles of a user by its id */\nexport const EDIT_USER = gql `\n  mutation editUser(\n    $id: ID!\n    $roles: [ID]!\n    $application: ID\n    $positionAttributes: [PositionAttributeInputType]\n  ) {\n    editUser(\n      id: $id\n      roles: $roles\n      application: $application\n      positionAttributes: $positionAttributes\n    ) {\n      id\n      username\n      name\n      roles {\n        id\n        title\n        application {\n          id\n        }\n      }\n      positionAttributes {\n        value\n        category {\n          id\n          title\n        }\n      }\n      oid\n    }\n  }\n`;\n// === EDIT USER PROFILE ===\n/** Graphql request for editing the user profile */\nexport const EDIT_USER_PROFILE = gql `\n  mutation editUserProfile($profile: UserProfileInputType!) {\n    editUserProfile(profile: $profile) {\n      id\n      username\n      name\n      roles {\n        id\n        title\n        application {\n          id\n        }\n      }\n      oid\n      favoriteApp\n    }\n  }\n`;\n// === ADD PAGE ===\n/** Graphql request for adding a new page of a given type to an application */\nexport const ADD_PAGE = gql `\n  mutation addPage($type: ContentEnumType!, $content: ID, $application: ID!) {\n    addPage(type: $type, content: $content, application: $application) {\n      id\n      name\n      type\n      content\n      createdAt\n      canSee\n      canUpdate\n      canDelete\n    }\n  }\n`;\n// === ADD ROLE ===\n/** Graphql request for adding a new role to an application */\nexport const ADD_ROLE = gql `\n  mutation addRole($title: String!, $application: ID) {\n    addRole(title: $title, application: $application) {\n      id\n      title\n      permissions {\n        id\n        type\n      }\n      usersCount\n    }\n  }\n`;\n/** Graphql request for adding a role to a user */\nexport const ADD_ROLE_TO_USERS = gql `\n  mutation addRoleToUsers(\n    $usernames: [String]!\n    $role: ID!\n    $positionAttributes: [PositionAttributeInputType]\n  ) {\n    addRoleToUsers(\n      usernames: $usernames\n      role: $role\n      positionAttributes: $positionAttributes\n    ) {\n      id\n      username\n      name\n      roles {\n        id\n        title\n      }\n      oid\n    }\n  }\n`;\n/** Graphql request for adding users to an application */\nexport const ADD_USERS = gql `\n  mutation addUsers($users: [UserInputType]!, $application: ID) {\n    addUsers(users: $users, application: $application) {\n      id\n      username\n      name\n      roles {\n        id\n        title\n      }\n      positionAttributes {\n        value\n        category {\n          id\n          title\n        }\n      }\n      oid\n    }\n  }\n`;\n// === EDIT ROLE ===\n/** Graphql request for editing a role by its id */\nexport const EDIT_ROLE = gql `\n  mutation editRole(\n    $id: ID!\n    $permissions: [ID]\n    $channels: [ID]\n    $title: String\n  ) {\n    editRole(\n      id: $id\n      permissions: $permissions\n      channels: $channels\n      title: $title\n    ) {\n      id\n      title\n      permissions {\n        id\n        type\n      }\n      usersCount\n      channels {\n        id\n        title\n        application {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n// === DELETE ROLE ===\n/** Graphql request for deleting a role by its id */\nexport const DELETE_ROLE = gql `\n  mutation deleteRole($id: ID!) {\n    deleteRole(id: $id) {\n      id\n    }\n  }\n`;\n// === DELETE USER ===\n/** Graphql request for deleting multiple users by their ids */\nexport const DELETE_USERS = gql `\n  mutation deleteUsers($ids: [ID]!) {\n    deleteUsers(ids: $ids)\n  }\n`;\n// === DELETE USER FROM APPLICATION ===\n/** Graphql request for removing multiple users from an application  */\nexport const DELETE_USERS_FROM_APPLICATION = gql `\n  mutation deleteUsersFromApplication($ids: [ID]!, $application: ID!) {\n    deleteUsersFromApplication(ids: $ids, application: $application) {\n      id\n      username\n      name\n      roles {\n        id\n        title\n      }\n      oid\n    }\n  }\n`;\n// === ADD POSITION ===\n/** Graphql request for adding a new position attribute category to an application */\nexport const ADD_POSITION_ATTRIBUTE_CATEGORY = gql `\n  mutation addPositionAttributeCategory($title: String!, $application: ID!) {\n    addPositionAttributeCategory(title: $title, application: $application) {\n      id\n      title\n    }\n  }\n`;\n// === DELETE POSITION ===\n/** Graphql request for deleting a position attribute category from an application */\nexport const DELETE_POSITION_ATTRIBUTE_CATEGORY = gql `\n  mutation deletePositionAttributeCategory($id: ID!, $application: ID!) {\n    deletePositionAttributeCategory(id: $id, application: $application) {\n      id\n    }\n  }\n`;\n// === EDIT POSITION ===\n/** Graphql request for editing position attribute category in an application */\nexport const EDIT_POSITION_ATTRIBUTE_CATEGORY = gql `\n  mutation editPositionAttributeCategory(\n    $id: ID!\n    $application: ID!\n    $title: String!\n  ) {\n    editPositionAttributeCategory(\n      id: $id\n      application: $application\n      title: $title\n    ) {\n      id\n      title\n    }\n  }\n`;\n// === DELETE PAGE ===\n/** Graphql request for deleting a page by its id */\nexport const DELETE_PAGE = gql `\n  mutation deletePage($id: ID!) {\n    deletePage(id: $id) {\n      id\n    }\n  }\n`;\n/** Graphql request for editing an application by its id */\nexport const EDIT_APPLICATION = gql `\n  mutation editApplication(\n    $id: ID!\n    $name: String\n    $status: Status\n    $pages: [ID]\n    $permissions: JSON\n    $description: String\n  ) {\n    editApplication(\n      id: $id\n      name: $name\n      status: $status\n      pages: $pages\n      permissions: $permissions\n      description: $description\n    ) {\n      id\n      description\n      name\n      createdAt\n      modifiedAt\n      status\n      pages {\n        id\n        name\n        createdAt\n        type\n        content\n        canDelete\n        canSee\n        canUpdate\n      }\n      settings\n      permissions {\n        canSee {\n          id\n          title\n        }\n        canUpdate {\n          id\n          title\n        }\n        canDelete {\n          id\n          title\n        }\n      }\n      canSee\n      canUpdate\n      canDelete\n      locked\n      lockedByUser\n    }\n  }\n`;\n// === SEE NOTIFICATION ===\n/** Graphql request for marking a notification as seen */\nexport const SEE_NOTIFICATION = gql `\n  mutation seeNotification($id: ID!) {\n    seeNotification(id: $id) {\n      id\n      action\n      content\n      createdAt\n      channel {\n        id\n        title\n        application {\n          id\n        }\n      }\n      seenBy {\n        id\n        name\n      }\n    }\n  }\n`;\n// === SEE ALL NOTIFICATION ===\n/** Graphql request for marking multiple notifications as seen */\nexport const SEE_NOTIFICATIONS = gql `\n  mutation seeNotifications($ids: [ID]!) {\n    seeNotifications(ids: $ids)\n  }\n`;\n// === ADD CHANNEL ===\n/** Graphql request for adding a new channel to an application */\nexport const ADD_CHANNEL = gql `\n  mutation addChannel($title: String!, $application: ID!) {\n    addChannel(title: $title, application: $application) {\n      id\n      title\n      application {\n        id\n        name\n      }\n      subscribedRoles {\n        id\n        title\n        usersCount\n      }\n    }\n  }\n`;\n// === EDIT CHANNEL ===\n/** Graphql request for editing a channel by its id */\nexport const EDIT_CHANNEL = gql `\n  mutation editChannel($id: ID!, $title: String!) {\n    editChannel(id: $id, title: $title) {\n      id\n      title\n    }\n  }\n`;\n// === DELETE CHANNEL ===\n/** Graphql request for deleting a channel */\nexport const DELETE_CHANNEL = gql `\n  mutation deleteChannel($id: ID!) {\n    deleteChannel(id: $id) {\n      id\n      title\n    }\n  }\n`;\n// === PUBLISH NOTIFICATION ===\n/** Graphql request for publishing a new notification onto a a channel */\nexport const PUBLISH_NOTIFICATION = gql `\n  mutation publishNotification(\n    $action: String!\n    $content: JSON!\n    $channel: ID!\n  ) {\n    publishNotification(action: $action, content: $content, channel: $channel) {\n      id\n      action\n      content\n      createdAt\n      channel {\n        id\n        title\n        application {\n          id\n          name\n        }\n      }\n      seenBy {\n        id\n        username\n      }\n    }\n  }\n`;\n// === PUBLISH RECORDS ===\n/** Graphql request for publishing rows to a channel */\nexport const PUBLISH = gql `\n  mutation publish($ids: [ID]!, $channel: ID!) {\n    publish(ids: $ids, channel: $channel)\n  }\n`;\n// === DELETE RECORD ===\n/** Graphql request for deleting a record by its id */\nexport const DELETE_RECORD = gql `\n  mutation deleteRecord($id: ID!) {\n    deleteRecord(id: $id) {\n      id\n    }\n  }\n`;\n// === DELETE RECORD ===\n/** Graphl request for deleting multiple records by their ids */\nexport const DELETE_RECORDS = gql `\n  mutation deleteRecords($ids: [ID]!) {\n    deleteRecords(ids: $ids)\n  }\n`;\n// === ADD SUBSCRIPTION ===\n/** Graphql request for adding a new subscription to an application */\nexport const ADD_SUBSCRIPTION = gql `\n  mutation addSubscription(\n    $application: ID!\n    $routingKey: String!\n    $title: String!\n    $convertTo: ID\n    $channel: ID\n  ) {\n    addSubscription(\n      application: $application\n      routingKey: $routingKey\n      title: $title\n      convertTo: $convertTo\n      channel: $channel\n    ) {\n      routingKey\n      title\n      convertTo {\n        id\n        name\n      }\n      channel {\n        id\n        title\n      }\n    }\n  }\n`;\n// === EDIT SUBSCRIPTION ===\n/** Graphql resuest for editing a subscription in an application */\nexport const EDIT_SUBSCRIPTION = gql `\n  mutation editSubscription(\n    $applicationId: ID!\n    $routingKey: String!\n    $title: String!\n    $convertTo: String!\n    $channel: String!\n    $previousSubscription: String!\n  ) {\n    editSubscription(\n      applicationId: $applicationId\n      routingKey: $routingKey\n      title: $title\n      convertTo: $convertTo\n      channel: $channel\n      previousSubscription: $previousSubscription\n    ) {\n      routingKey\n      title\n      convertTo {\n        id\n        name\n      }\n      channel {\n        id\n        title\n      }\n    }\n  }\n`;\n// === DELETE SUBSCRIPTION ===\n/** Grahql request for deleting a subscription from an application */\nexport const DELETE_SUBSCRIPTION = gql `\n  mutation deleteSubscription($applicationId: ID!, $routingKey: String!) {\n    deleteSubscription(applicationId: $applicationId, routingKey: $routingKey) {\n      id\n    }\n  }\n`;\n// === ADD STEP ===\n/** Graphql request for adding a new step of a given type to a workflow */\nexport const ADD_STEP = gql `\n  mutation addStep($type: String!, $content: ID, $workflow: ID!) {\n    addStep(type: $type, content: $content, workflow: $workflow) {\n      id\n      name\n      type\n      content\n      createdAt\n    }\n  }\n`;\n// === TOGGLE APPLICATION LOCK ===\n/** Graphql request for toggling the application lock state */\nexport const TOGGLE_APPLICATION_LOCK = gql `\n  mutation toggleApplicationLock($id: ID!, $lock: Boolean!) {\n    toggleApplicationLock(id: $id, lock: $lock) {\n      id\n      locked\n      lockedByUser\n    }\n  }\n`;\n// === EDIT DASHBOARD ===\n/** Graphql request for editing a dashboard by its id */\nexport const EDIT_DASHBOARD = gql `\n  mutation editDashboard($id: ID!, $structure: JSON, $name: String) {\n    editDashboard(id: $id, structure: $structure, name: $name) {\n      id\n      name\n      structure\n      modifiedAt\n      permissions {\n        canSee {\n          id\n          title\n        }\n        canUpdate {\n          id\n          title\n        }\n        canDelete {\n          id\n          title\n        }\n      }\n      canSee\n      canUpdate\n      page {\n        id\n        name\n        application {\n          id\n        }\n      }\n    }\n  }\n`;\n/** Graphql request for adding a new layout with a given type */\nexport const ADD_LAYOUT = gql `\n  mutation addLayout($resource: ID, $form: ID, $layout: LayoutInputType!) {\n    addLayout(resource: $resource, form: $form, layout: $layout) {\n      id\n      name\n      createdAt\n      query\n      display\n    }\n  }\n`;\n/** Grahql request for editing a layout by its id */\nexport const EDIT_LAYOUT = gql `\n  mutation editLayout(\n    $resource: ID\n    $form: ID\n    $layout: LayoutInputType!\n    $id: ID!\n  ) {\n    editLayout(resource: $resource, form: $form, layout: $layout, id: $id) {\n      id\n      name\n      createdAt\n      query\n      display\n    }\n  }\n`;\n/** Graphql request for deleting a layout by its id */\nexport const DELETE_LAYOUT = gql `\n  mutation deleteLayout($resource: ID, $form: ID, $id: ID!) {\n    deleteLayout(resource: $resource, form: $form, id: $id) {\n      id\n      name\n      createdAt\n    }\n  }\n`;\n","import { gql } from 'apollo-angular';\n// === GET PROFILE ===\n/** Graphql request for getting profile of the current user */\nexport const GET_PROFILE = gql `\n  {\n    me {\n      id\n      username\n      isAdmin\n      name\n      roles {\n        id\n        title\n        application {\n          id\n        }\n        permissions {\n          id\n        }\n      }\n      permissions {\n        id\n        type\n        global\n      }\n      applications {\n        id\n        positionAttributes {\n          value\n        }\n        name\n        role {\n          title\n        }\n      }\n      oid\n      favoriteApp\n    }\n  }\n`;\n// === GET FORM BY ID ===\n/** Graphql request for getting the form structure by its id */\nexport const GET_FORM_STRUCTURE = gql `\n  query GetFormById($id: ID!) {\n    form(id: $id) {\n      id\n      structure\n    }\n  }\n`;\n/** Graphql request for getting the meta fields of a grid by form id */\nexport const GET_GRID_FORM_META = gql `\n  query GetFormAsTemplate($id: ID!) {\n    form(id: $id) {\n      id\n      name\n      queryName\n      layouts {\n        id\n        name\n        createdAt\n        query\n        display\n      }\n    }\n  }\n`;\n/** Graphql request for getting form data by its id */\nexport const GET_FORM_BY_ID = gql `\n  query GetFormById($id: ID!) {\n    form(id: $id) {\n      id\n      name\n      createdAt\n      structure\n      status\n      fields\n      resource {\n        id\n      }\n      canUpdate\n    }\n  }\n`;\n// === GET RELATED FORMS FROM RESOURCE ===\n/** Graphql request for getting resource meta date for a grid */\nexport const GET_GRID_RESOURCE_META = gql `\n  query GetGridResourceMeta($resource: ID!) {\n    resource(id: $resource) {\n      id\n      name\n      queryName\n      forms {\n        id\n        name\n      }\n      relatedForms {\n        id\n        name\n        fields\n      }\n      layouts {\n        id\n        name\n        query\n        createdAt\n        display\n      }\n    }\n  }\n`;\n// === GET RESOURCE BY ID ===\n/** Graphql request for getting the name of a resource by its id */\nexport const GET_SHORT_RESOURCE_BY_ID = gql `\n  query GetShortResourceById($id: ID!) {\n    resource(id: $id) {\n      id\n      name\n    }\n  }\n`;\n/** Graphql request for getting data of a resource by its id */\nexport const GET_RESOURCE_BY_ID = gql `\n  query GetResourceById($id: ID!, $filter: JSON, $display: Boolean) {\n    resource(id: $id) {\n      id\n      name\n      createdAt\n      records(filter: $filter) {\n        edges {\n          node {\n            id\n            data(display: $display)\n          }\n          cursor\n        }\n        totalCount\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n      fields\n      forms {\n        id\n        name\n        status\n        createdAt\n        recordsCount\n        core\n        canUpdate\n        canDelete\n      }\n      coreForm {\n        uniqueRecord {\n          id\n        }\n      }\n      permissions {\n        canSee {\n          id\n          title\n        }\n        canUpdate {\n          id\n          title\n        }\n        canDelete {\n          id\n          title\n        }\n      }\n      canUpdate\n    }\n  }\n`;\n// === GET FORMS ===\n/** Graphql request for getting forms */\nexport const GET_FORMS = gql `\n  query GetFormNames($first: Int, $afterCursor: ID, $filter: JSON) {\n    forms(first: $first, afterCursor: $afterCursor, filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          core\n          resource {\n            id\n          }\n        }\n        cursor\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n`;\n// === GET RESOURCES ===\n/** Graphql request for getting resources */\nexport const GET_RESOURCES = gql `\n  query GetResources($first: Int, $afterCursor: ID) {\n    resources(first: $first, afterCursor: $afterCursor) {\n      edges {\n        node {\n          id\n          name\n        }\n        cursor\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n`;\n// === GET RECORD BY ID ===\n/** Graphql request for getting a record by its id */\nexport const GET_RECORD_BY_ID = gql `\n  query GetRecordById($id: ID!) {\n    record(id: $id) {\n      id\n      data\n      createdAt\n      modifiedAt\n      createdBy {\n        name\n      }\n      modifiedBy {\n        name\n      }\n      form {\n        id\n        structure\n        permissions {\n          recordsUnicity\n        }\n      }\n    }\n  }\n`;\n// === GET RECORD DETAILS ===\n/** Graphql request for getting record details by its id */\nexport const GET_RECORD_DETAILS = gql `\n  query GetRecordDetails($id: ID!) {\n    record(id: $id) {\n      id\n      data\n      createdAt\n      modifiedAt\n      createdBy {\n        name\n      }\n      form {\n        id\n        name\n        createdAt\n        structure\n        fields\n        core\n        resource {\n          id\n          name\n          forms {\n            id\n            name\n            structure\n            fields\n            core\n          }\n        }\n      }\n      versions {\n        id\n        createdAt\n        data\n        createdBy {\n          name\n        }\n      }\n    }\n  }\n`;\n// === GET ROLES ===\n/** Graphql request for getting roles (optionnally by an application id) */\nexport const GET_ROLES = gql `\n  query GetRoles($application: ID) {\n    roles(application: $application) {\n      id\n      title\n      permissions {\n        id\n        type\n      }\n      usersCount\n      channels {\n        id\n        title\n        application {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n// === GET USERS ===\n/** Graphql request for getting users (optionnally by a list of application ids) */\nexport const GET_USERS = gql `\n  query GetUsers($applications: [ID]) {\n    users(applications: $applications) {\n      id\n      username\n      name\n      oid\n    }\n  }\n`;\n// === GET NOTIFICATIONS ===\n/** Graphql request for getting notifications */\nexport const GET_NOTIFICATIONS = gql `\n  query GetNotifications($first: Int, $afterCursor: ID) {\n    notifications(first: $first, afterCursor: $afterCursor) {\n      edges {\n        node {\n          id\n          action\n          content\n          createdAt\n          channel {\n            id\n            title\n            application {\n              id\n            }\n          }\n          seenBy {\n            id\n            name\n          }\n        }\n        cursor\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n`;\n// === GET APPLICATION BY ID ===\n/** Graphql request for getting application data by its id */\nexport const GET_APPLICATION_BY_ID = gql `\n  query GetApplicationById($id: ID!, $asRole: ID) {\n    application(id: $id, asRole: $asRole) {\n      id\n      name\n      description\n      createdAt\n      status\n      pages {\n        id\n        name\n        type\n        content\n        createdAt\n        canSee\n        canUpdate\n        canDelete\n      }\n      roles {\n        id\n        title\n        permissions {\n          id\n          type\n        }\n        usersCount\n        channels {\n          id\n          title\n          application {\n            id\n            name\n          }\n        }\n        application {\n          id\n          name\n        }\n      }\n      users {\n        id\n        username\n        name\n        roles {\n          id\n          title\n        }\n        positionAttributes {\n          value\n          category {\n            id\n            title\n          }\n        }\n        oid\n      }\n      permissions {\n        canSee {\n          id\n          title\n        }\n        canUpdate {\n          id\n          title\n        }\n        canDelete {\n          id\n          title\n        }\n      }\n      channels {\n        id\n        title\n        subscribedRoles {\n          id\n          title\n          application {\n            id\n            name\n          }\n          usersCount\n        }\n      }\n      subscriptions {\n        routingKey\n        title\n        channel {\n          id\n          title\n        }\n        convertTo {\n          id\n          name\n        }\n      }\n      canSee\n      canUpdate\n      canDelete\n      positionAttributeCategories {\n        id\n        title\n      }\n      locked\n      lockedByUser\n    }\n  }\n`;\n// === GET APPLICATIONS ===\n/** Graphql request for getting the list of applications */\nexport const GET_APPLICATIONS = gql `\n  query GetApplications($first: Int, $afterCursor: ID, $filter: JSON) {\n    applications(first: $first, afterCursor: $afterCursor, filter: $filter) {\n      edges {\n        node {\n          id\n          name\n        }\n        cursor\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n`;\n// === GET ROLES FROM APPLICATION ===\n/** Graphql request for getting roles of applications by the application ids */\nexport const GET_ROLES_FROM_APPLICATIONS = gql `\n  query GetRolesFromApplications($applications: [ID]!) {\n    rolesFromApplications(applications: $applications) {\n      id\n      title(appendApplicationName: true)\n    }\n  }\n`;\n// === GET PERMISSIONS ===\n/** Graphql request for getting permissions */\nexport const GET_PERMISSIONS = gql `\n  query GetPermissions($application: Boolean) {\n    permissions(application: $application) {\n      id\n      type\n      global\n    }\n  }\n`;\n// === GET QUERY TYPES ===\n/** Graphql request for getting query types */\nexport const GET_QUERY_TYPES = gql `\n  query GetQueryTypes {\n    __schema {\n      types {\n        name\n        kind\n        fields {\n          name\n          args {\n            name\n            type {\n              name\n              kind\n              inputFields {\n                name\n                type {\n                  name\n                  kind\n                }\n              }\n            }\n          }\n          type {\n            name\n            kind\n            ofType {\n              name\n              fields {\n                name\n                type {\n                  name\n                  kind\n                  ofType {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      queryType {\n        name\n        kind\n        fields {\n          name\n          args {\n            name\n            type {\n              name\n              kind\n              inputFields {\n                name\n                type {\n                  name\n                  kind\n                }\n              }\n            }\n          }\n          type {\n            name\n            kind\n            ofType {\n              name\n              fields {\n                name\n                type {\n                  name\n                  kind\n                  ofType {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n// === GET TYPE ===\n/** Graphql request for getting type info by its name */\nexport const GET_TYPE = gql `\n  query GetType($name: String!) {\n    __type(name: $name) {\n      fields {\n        name\n        type {\n          name\n          kind\n          ofType {\n            name\n            fields {\n              name\n              type {\n                kind\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n// === GET CHANNELS ===\n/** Graphql request for getting channels (optionnally by an application id) */\nexport const GET_CHANNELS = gql `\n  query getChannels($application: ID) {\n    channels(application: $application) {\n      id\n      title\n      application {\n        id\n        name\n      }\n    }\n  }\n`;\n// === GET WORKFLOW BY ID ===\n/** Graphql request for getting workflow by its id */\nexport const GET_WORKFLOW_BY_ID = gql `\n  query GetWorkflowById($id: ID!, $asRole: ID) {\n    workflow(id: $id, asRole: $asRole) {\n      id\n      name\n      createdAt\n      modifiedAt\n      canUpdate\n      permissions {\n        canSee {\n          id\n          title\n        }\n        canUpdate {\n          id\n          title\n        }\n        canDelete {\n          id\n          title\n        }\n      }\n      steps {\n        id\n        name\n        type\n        content\n        createdAt\n        canDelete\n      }\n      page {\n        id\n        name\n        canUpdate\n        permissions {\n          canSee {\n            id\n            title\n          }\n          canUpdate {\n            id\n            title\n          }\n          canDelete {\n            id\n            title\n          }\n        }\n        application {\n          id\n        }\n      }\n    }\n  }\n`;\n// === GET DASHBOARD BY ID ===\n/** Graphql request for getting a dashboard by its id */\nexport const GET_DASHBOARD_BY_ID = gql `\n  query GetDashboardById($id: ID!) {\n    dashboard(id: $id) {\n      id\n      name\n      createdAt\n      structure\n      permissions {\n        canSee {\n          id\n          title\n        }\n        canUpdate {\n          id\n          title\n        }\n        canDelete {\n          id\n          title\n        }\n      }\n      canSee\n      canUpdate\n      page {\n        id\n        application {\n          id\n        }\n        canUpdate\n      }\n      step {\n        id\n        workflow {\n          id\n          page {\n            id\n            application {\n              id\n            }\n          }\n        }\n        canUpdate\n      }\n    }\n  }\n`;\n/** graphql request for getting records of a resource by its id */\nexport const GET_RESOURCE_RECORDS = gql `\n  query GetResourceRecords(\n    $id: ID!\n    $afterCursor: ID\n    $first: Int\n    $filter: JSON\n    $display: Boolean\n  ) {\n    resource(id: $id) {\n      records(first: $first, afterCursor: $afterCursor, filter: $filter) {\n        edges {\n          node {\n            id\n            data(display: $display)\n            versions {\n              id\n              createdAt\n              data\n            }\n            form {\n              id\n              name\n            }\n          }\n          cursor\n        }\n        totalCount\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n`;\n","import { __decorate } from \"tslib\";\nimport { Apollo, gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport { PipelineStage } from '../components/ui/aggregation-builder/pipeline/pipeline-stage.enum';\nimport { Accumulators } from '../components/ui/aggregation-builder/pipeline/expressions/operators';\nimport { Subject } from 'rxjs';\nimport { addNewField } from '../components/query-builder/query-builder-forms';\nimport { SafeGridService } from './grid.service';\n/**\n * Shared aggregation service.\n * Aggregation are used by chart widgets, to get the data.\n * The aggregation is flexible.\n */\nlet AggregationBuilderService = class AggregationBuilderService {\n    /**\n     * Shared aggregation service.\n     * Aggregation are used by chart widgets, to get the data.\n     * The aggregation is flexible.\n     *\n     * @param apollo Apollo client\n     * @param gridService The grid service\n     */\n    constructor(apollo, gridService) {\n        this.apollo = apollo;\n        this.gridService = gridService;\n        this.gridSubject = new Subject();\n    }\n    /**\n     * Get the data for grid preview as an observable.\n     *\n     * @returns An observable with all the data needed for the preview grid.\n     */\n    getPreviewGrid() {\n        return this.gridSubject.asObservable();\n    }\n    /**\n     * Initializes preview grid using pipeline parameters.\n     *\n     * @param aggregationForm The form for the aggregation\n     * @param pipeline Array of stages.\n     * @param selectedFields Fields before aggregation.\n     * @param metaFields List of meta fields\n     */\n    initGrid(aggregationForm, pipeline, selectedFields, metaFields) {\n        var _a;\n        let loadingGrid = true;\n        let gridData = {\n            data: [],\n            total: 0,\n        };\n        let gridFields = [];\n        if ((_a = aggregationForm.get('pipeline')) === null || _a === void 0 ? void 0 : _a.valid) {\n            if (pipeline.length) {\n                loadingGrid = true;\n                gridFields = this.gridService.getFields(this.formatFields(this.fieldsAfter(selectedFields, pipeline)), metaFields, {});\n                const query = this.buildAggregation(aggregationForm.value, false);\n                if (query) {\n                    query.subscribe((res) => {\n                        if (res.data.recordsAggregation) {\n                            gridData = {\n                                data: res.data.recordsAggregation,\n                                total: res.data.recordsAggregation.length,\n                            };\n                        }\n                        loadingGrid = res.loading;\n                        this.gridSubject.next({\n                            fields: gridFields,\n                            data: gridData,\n                            loading: loadingGrid,\n                        });\n                    });\n                }\n            }\n            else {\n                gridFields = [];\n                gridData = {\n                    data: [],\n                    total: 0,\n                };\n            }\n        }\n        this.gridSubject.next({\n            fields: gridFields,\n            data: gridData,\n            loading: loadingGrid,\n        });\n    }\n    /**\n     * Formats fields so they are aligned with the queryBuilder format.\n     *\n     * @param fields Raw fields to format.\n     * @returns formatted fields.\n     */\n    formatFields(fields) {\n        return fields.map((field) => {\n            const formattedForm = addNewField(field, true);\n            formattedForm.enable();\n            const formattedField = formattedForm.value;\n            if (formattedField.kind !== 'SCALAR' && field.fields.length) {\n                formattedField.fields = this.formatFields(field.fields);\n            }\n            return formattedField;\n        });\n    }\n    /**\n     * Builds the aggregation query from aggregation definition\n     *\n     * @param aggregation Aggregation definition\n     * @param withMapping Wether if we should inculde the mapping in the aggregation.\n     * @returns Aggregation query\n     */\n    buildAggregation(aggregation, withMapping = true) {\n        if (aggregation) {\n            const query = gql `\n        query GetCustomAggregation($aggregation: JSON!, $withMapping: Boolean) {\n          recordsAggregation(\n            aggregation: $aggregation\n            withMapping: $withMapping\n          )\n        }\n      `;\n            return this.apollo.query({\n                query,\n                variables: {\n                    aggregation,\n                    withMapping,\n                },\n            });\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Get the list of fields after passed pipeline.\n     *\n     * @param initialFields Initial value of fields before pipeline.\n     * @param pipeline Pipeline stages to go through.\n     * @returns Fields remaining at the end of the pipeline.\n     */\n    fieldsAfter(initialFields, pipeline) {\n        let fields = [...initialFields];\n        for (const stage of pipeline) {\n            switch (stage.type) {\n                case PipelineStage.GROUP: {\n                    if (stage.form.groupBy) {\n                        let groupByField = this.findField(stage.form.groupBy, fields);\n                        fields = [];\n                        if (groupByField) {\n                            // Change field type because of automatic unwind\n                            const newField = Object.assign({}, groupByField);\n                            newField.type = Object.assign({}, groupByField.type);\n                            if (stage.form.groupBy.includes('.')) {\n                                const fieldArray = stage.form.groupBy.split('.');\n                                const sub = fieldArray.pop();\n                                newField.type.kind = 'OBJECT';\n                                newField.fields = newField.fields.map((x) => x.name === sub\n                                    ? Object.assign(Object.assign({}, x), { type: Object.assign(Object.assign({}, x.type), { kind: 'SCALAR', name: 'String' }) }) : x);\n                            }\n                            else {\n                                newField.type.kind = 'SCALAR';\n                                newField.type.name = 'String';\n                            }\n                            groupByField = newField;\n                        }\n                        fields.push(groupByField);\n                    }\n                    if (stage.form.addFields) {\n                        this.addFields(fields, stage.form.addFields, initialFields);\n                    }\n                    break;\n                }\n                case PipelineStage.ADD_FIELDS: {\n                    this.addFields(fields, stage.form, initialFields);\n                    break;\n                }\n                case PipelineStage.UNWIND: {\n                    if (stage.form.field.includes('.')) {\n                        const fieldArray = stage.form.field.split('.');\n                        const parent = fieldArray.shift();\n                        const sub = fieldArray.pop();\n                        fields = fields.map((field) => {\n                            if (field.name === parent) {\n                                const newField = Object.assign({}, field);\n                                newField.type = Object.assign(Object.assign({}, field.type), { kind: 'OBJECT' });\n                                newField.fields = field.fields.map((x) => x.name === sub\n                                    ? Object.assign(Object.assign({}, x), { type: Object.assign(Object.assign({}, x.type), { kind: 'SCALAR', name: 'String' }) }) : x);\n                                return newField;\n                            }\n                            return field;\n                        });\n                    }\n                    else {\n                        fields = fields.map((field) => {\n                            if (field.name === stage.form.field) {\n                                const newField = Object.assign({}, field);\n                                newField.type = Object.assign(Object.assign({}, field.type), { kind: 'SCALAR', name: 'String' });\n                                return newField;\n                            }\n                            return field;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        }\n        return fields.sort((a, b) => (a.name > b.name ? 1 : -1));\n    }\n    /**\n     * Adds fields in list of fields.\n     *\n     * @param fields list of fields.\n     * @param form form value\n     * @param initialFields initial list of fields\n     */\n    addFields(fields, form, initialFields) {\n        var _a;\n        for (const addField of form) {\n            fields.push({\n                name: addField.name ? addField.name : addField.expression.operator,\n                type: {\n                    name: addField.expression.operator === Accumulators.AVG\n                        ? 'Float'\n                        : addField.expression.operator === Accumulators.COUNT\n                            ? 'Int'\n                            : ((_a = initialFields.find((x) => x.name === addField.expression.field)) === null || _a === void 0 ? void 0 : _a.type.name) || 'String',\n                    kind: 'SCALAR',\n                },\n            });\n        }\n    }\n    /**\n     * Gets a field in list of fields.\n     *\n     * @param fieldName name of field to search\n     * @param fields list of fields\n     * @returns field\n     */\n    findField(fieldName, fields) {\n        let outField = fields.find((x) => x.name === fieldName);\n        if (!outField && fieldName.includes('.')) {\n            const fieldArray = fieldName.split('.');\n            const parent = fieldArray.shift();\n            const sub = fieldArray.pop();\n            outField = fields.reduce((o, field) => {\n                if (field.name === parent &&\n                    field.fields.some((x) => x.name === sub)) {\n                    const newField = Object.assign({}, field);\n                    newField.fields = field.fields.filter((x) => x.name === sub);\n                    return newField;\n                }\n                return o;\n            }, null);\n        }\n        else {\n            outField = Object.assign({}, outField);\n        }\n        return outField;\n    }\n};\nAggregationBuilderService.ctorParameters = () => [\n    { type: Apollo },\n    { type: SafeGridService }\n];\nAggregationBuilderService = __decorate([\n    Injectable({\n        providedIn: 'root',\n    })\n], AggregationBuilderService);\nexport { AggregationBuilderService };\n","import { gql } from 'apollo-angular';\n/** Graphql request for listening to notifications */\nexport const NOTIFICATION_SUBSCRIPTION = gql `\n  subscription NotificationSubscription {\n    notification {\n      id\n      action\n      content\n      createdAt\n      channel {\n        id\n        title\n        application {\n          id\n        }\n      }\n      seenBy {\n        id\n        name\n      }\n    }\n  }\n`;\n/** Graphql request for listening to new records */\nexport const RECORD_ADDED_SUBSCRIPTION = gql `\n  subscription RecordAddedSubscription($resource: ID, $form: ID) {\n    recordAdded(resource: $resource, form: $form) {\n      id\n      data(display: true)\n    }\n  }\n`;\n/** Graphql request  for listening to unlocking of applications */\nexport const APPLICATION_UNLOCKED_SUBSCRIPTION = gql `\n  subscription applicationUnlocked($id: ID!) {\n    applicationUnlocked(id: $id) {\n      id\n      locked\n      lockedByUser\n    }\n  }\n`;\n/** Graphql request for listening to editing of applications */\nexport const APPLICATION_EDITED_SUBSCRIPTION = gql `\n  subscription applicationEdited($id: ID!) {\n    applicationEdited(id: $id) {\n      id\n      name\n      description\n      createdAt\n      status\n      canSee\n      canUpdate\n      lockedBy {\n        id\n        name\n      }\n    }\n  }\n`;\n","import { __decorate } from \"tslib\";\nimport { Apollo, gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { GET_QUERY_TYPES } from '../graphql/queries';\nimport { FormBuilder } from '@angular/forms';\n/** List of fields part of the schema but not selectable */\nconst NON_SELECTABLE_FIELDS = ['canUpdate', 'canDelete'];\n/** List of user fields */\nconst USER_FIELDS = ['id', 'name', 'username'];\n/**\n * Shared query builder service. The query builder service is used by the widgets, that creates the query based on their settings.\n * Query builder service only performs query on the schema generated on the go from the forms / resources definitions.\n */\nlet QueryBuilderService = class QueryBuilderService {\n    /**\n     * Shared query builder service. The query builder service is used by the widgets, that creates the query based on their settings.\n     * Query builder service only performs query on the schema generated on the go from the forms / resources definitions.\n     *\n     * @param apollo Apollo client\n     * @param formBuilder Angular form builder\n     */\n    constructor(apollo, formBuilder) {\n        this.apollo = apollo;\n        this.formBuilder = formBuilder;\n        /** Available forms / resources queries */\n        this.availableQueries = new BehaviorSubject([]);\n        /** Available forms / resources types */\n        this.availableTypes = new BehaviorSubject([]);\n        /** User fields */\n        this.userFields = [];\n        this.apollo\n            .query({\n            query: GET_QUERY_TYPES,\n        })\n            .subscribe((res) => {\n            // eslint-disable-next-line no-underscore-dangle\n            this.availableTypes.next(res.data.__schema.types);\n            this.availableQueries.next(\n            // eslint-disable-next-line no-underscore-dangle\n            res.data.__schema.queryType.fields.filter((x) => x.name.startsWith('all')));\n            // eslint-disable-next-line no-underscore-dangle\n            this.userFields = res.data.__schema.types\n                .find((x) => x.name === 'User')\n                .fields.filter((x) => USER_FIELDS.includes(x.name));\n        });\n    }\n    /** @returns Available forms / resources queries as observalbe */\n    get availableQueries$() {\n        return this.availableQueries.asObservable();\n    }\n    /** @returns Available forms / resources types as observable */\n    get availableTypes$() {\n        return this.availableTypes.asObservable();\n    }\n    /**\n     * Gets list of fields from a query name.\n     *\n     * @param queryName Form / Resource query name.\n     * @returns List of fields of this structure.\n     */\n    getFields(queryName) {\n        var _a;\n        const query = this.availableQueries\n            .getValue()\n            .find((x) => x.name === queryName);\n        const typeName = ((_a = query === null || query === void 0 ? void 0 : query.type) === null || _a === void 0 ? void 0 : _a.name.replace('Connection', '')) || '';\n        const type = this.availableTypes\n            .getValue()\n            .find((x) => x.name === typeName);\n        return type\n            ? type.fields\n                .filter((x) => !NON_SELECTABLE_FIELDS.includes(x.name))\n                .sort((a, b) => a.name.localeCompare(b.name))\n            : [];\n    }\n    /**\n     * Gets list of fields from a type.\n     *\n     * @param typeName Form / Resource type.\n     * @returns List of fields of this structure.\n     */\n    getFieldsFromType(typeName) {\n        if (typeName === 'User') {\n            return this.userFields;\n        }\n        const type = this.availableTypes\n            .getValue()\n            .find((x) => x.name === typeName);\n        return type\n            ? type.fields\n                .filter((x) => !NON_SELECTABLE_FIELDS.includes(x.name))\n                .sort((a, b) => a.name.localeCompare(b.name))\n            : [];\n    }\n    /**\n     * Gets list of LIST fields from a query name.\n     *\n     * @param queryName Form / Resource query name.\n     * @returns List of LIST fields of this structure.\n     */\n    getListFields(queryName) {\n        var _a;\n        const query = this.availableQueries\n            .getValue()\n            .find((x) => x.name === queryName);\n        const typeName = ((_a = query === null || query === void 0 ? void 0 : query.type) === null || _a === void 0 ? void 0 : _a.name.replace('Connection', '')) || '';\n        const type = this.availableTypes\n            .getValue()\n            .find((x) => x.name === typeName);\n        return type\n            ? type.fields\n                .filter((x) => x.type.kind === 'LIST')\n                .sort((a, b) => a.name.localeCompare(b.name))\n            : [];\n    }\n    /**\n     * Builds the fields part of the GraphQL query.\n     *\n     * @param fields List of fields to query.\n     * @returns QL document to build the query.\n     */\n    buildFields(fields) {\n        return ['id\\n'].concat(fields.map((x) => {\n            switch (x.kind) {\n                case 'SCALAR': {\n                    return x.name + '\\n';\n                }\n                case 'LIST': {\n                    return (`${x.name} (\n            sortField: ${x.sort.field ? `\"${x.sort.field}\"` : null},\n            sortOrder: \"${x.sort.order}\",\n            filter: ${this.filterToString(x.filter)}\n          ) {\n            ${['canUpdate\\ncanDelete\\n'].concat(this.buildFields(x.fields))}\n          }` + '\\n');\n                }\n                case 'OBJECT': {\n                    return (`${x.name} {\n            ${this.buildFields(x.fields)}\n          }` + '\\n');\n                }\n                default: {\n                    return '';\n                }\n            }\n        }));\n    }\n    /**\n     * Builds parsable GraphQL string from the filter definition.\n     *\n     * @param filter Filter definition\n     * @returns GraphQL parsable strinf for the filter.\n     */\n    filterToString(filter) {\n        if (filter.filters) {\n            return `{ logic: \"${filter.logic}\", filters: [${filter.filters.map((x) => this.filterToString(x))}]}`;\n        }\n        else {\n            return `{ field: \"${filter.field}\", operator: \"${filter.operator}\", value: \"${filter.value}\" }`;\n        }\n    }\n    /**\n     * Builds the fields part of the GraphQL meta query.\n     *\n     * @param fields List of fields to query.\n     * @returns QL document to build the query.\n     */\n    buildMetaFields(fields) {\n        if (!fields) {\n            return '';\n        }\n        return [''].concat(fields.map((x) => {\n            switch (x.kind) {\n                case 'SCALAR': {\n                    return x.name + '\\n';\n                }\n                case 'LIST': {\n                    return x.fields && x.fields.length > 0\n                        ? `${x.name} {\n                ${x.fields && x.fields.length > 0\n                            ? this.buildMetaFields(x.fields)\n                            : ''}\n              }` + '\\n'\n                        : x.name + '\\n';\n                }\n                case 'OBJECT': {\n                    return (`${x.name} {\n            ${x.fields && x.fields.length > 0\n                        ? this.buildMetaFields(x.fields)\n                        : ''}\n          }` + '\\n');\n                }\n                default: {\n                    return '';\n                }\n            }\n        }));\n    }\n    /**\n     * Builds a form / resource query from widget settings.\n     * TODO: we should pass directly the query definition, instead of the settings.\n     *\n     * @param settings Widget settings.\n     * @returns GraphQL query.\n     */\n    buildQuery(settings) {\n        var _a;\n        const builtQuery = settings.query;\n        if (((_a = builtQuery === null || builtQuery === void 0 ? void 0 : builtQuery.fields) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n            const fields = ['canUpdate\\ncanDelete\\n'].concat(this.buildFields(builtQuery.fields));\n            return this.graphqlQuery(builtQuery.name, fields);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Builds a graphQL query from name and fields strings.\n     *\n     * @param name name of the query.\n     * @param fields fields to fetch.\n     * @returns GraphQL query.\n     */\n    graphqlQuery(name, fields) {\n        return gql `\n    query GetCustomQuery($first: Int, $skip: Int, $filter: JSON, $sortField: String, $sortOrder: String, $display: Boolean, $styles: JSON) {\n      ${name}(\n      first: $first,\n      skip: $skip,\n      sortField: $sortField,\n      sortOrder: $sortOrder,\n      filter: $filter,\n      display: $display\n      styles: $styles\n      ) {\n        edges {\n          node {\n            ${fields}\n          }\n          meta\n        }\n        totalCount\n      }\n    }\n  `;\n    }\n    /**\n     * Builds a GraphQL meta query of a form / resource from widget settings.\n     *\n     * @param query Widget query.\n     * @returns GraphQL meta query.\n     */\n    buildMetaQuery(query) {\n        if (query && query.fields.length > 0) {\n            const metaFields = this.buildMetaFields(query.fields);\n            const metaQuery = gql `\n        query GetCustomMetaQuery {\n          _${query.name}Meta {\n            ${metaFields}\n          }\n        }\n      `;\n            return this.apollo.query({\n                query: metaQuery,\n                variables: {},\n                fetchPolicy: 'cache-first',\n            });\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Returns the query name from a resource name.\n     *\n     * @param resourceName Resource name\n     * @returns Query name\n     */\n    getQueryNameFromResourceName(resourceName) {\n        var _a;\n        const nameTrimmed = resourceName\n            .replace(/_|-/g, '')\n            .replace(/\\s+(?=\\d)/g, '_')\n            .replace(/\\s/g, '')\n            .toLowerCase();\n        return (((_a = this.availableQueries\n            .getValue()\n            .find((x) => x.type.name.toLowerCase() === nameTrimmed + 'connection')) === null || _a === void 0 ? void 0 : _a.name) || '');\n    }\n    /**\n     * Finds the source of a query.\n     * Used in order to find related forms.\n     *\n     * @param queryName Query name\n     * @returns Apollo query.\n     */\n    sourceQuery(queryName) {\n        const queries = this.availableQueries.getValue().map((x) => x.name);\n        if (queries.includes(queryName)) {\n            const query = gql `\n        query GetCustomSourceQuery {\n          _${queryName}Meta {\n            _source\n          }\n        }\n      `;\n            return this.apollo.query({\n                query,\n                variables: {},\n            });\n        }\n        else {\n            return null;\n        }\n    }\n};\nQueryBuilderService.ctorParameters = () => [\n    { type: Apollo },\n    { type: FormBuilder }\n];\nQueryBuilderService = __decorate([\n    Injectable({\n        providedIn: 'root',\n    })\n], QueryBuilderService);\nexport { QueryBuilderService };\n"],"names":[],"sourceRoot":""}