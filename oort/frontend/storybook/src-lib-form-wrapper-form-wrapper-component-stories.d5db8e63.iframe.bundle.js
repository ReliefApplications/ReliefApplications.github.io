"use strict";(self.webpackChunkoort_front=self.webpackChunkoort_front||[]).push([[5212],{"./libs/ui/src/lib/autocomplete/autocomplete.module.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>AutocompleteModule});var _class,tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),autocomplete_component=__webpack_require__("./libs/ui/src/lib/autocomplete/autocomplete.component.ts"),lodash=__webpack_require__("./node_modules/lodash/lodash.js"),Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),takeUntil=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"),merge=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/merge.js"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),overlay=__webpack_require__("./node_modules/@angular/cdk/fesm2020/overlay.mjs"),portal=__webpack_require__("./node_modules/@angular/cdk/fesm2020/portal.mjs");let AutocompleteDirective=(_class=class AutocompleteDirective{constructor(control,el,renderer,viewContainerRef,overlay,document){this.el=el,this.renderer=renderer,this.viewContainerRef=viewContainerRef,this.overlay=overlay,this.document=document,this.scrollStrategy="close",this.opened=new core.EventEmitter,this.closed=new core.EventEmitter,this.optionSelected=new core.EventEmitter,this.destroy$=new Subject.x,this.getOptionValue=option=>this.autocompleteDisplayKey?option.value[this.autocompleteDisplayKey]:option.value,this.getNotGroupOptionList=()=>this.autocompletePanel.options?this.autocompletePanel.options.filter((option=>!option.isGroup)):[],this.getGroupOptionList=()=>this.autocompletePanel.options?this.autocompletePanel.options.filter((option=>option.isGroup)):[],this.control=control,this.inputElement=el.nativeElement}onClick(){this.autocompletePanel.openPanel||this.openAutocompletePanel()}ngOnInit(){this.inputEventListener=this.renderer.listen(this.inputElement,"input",(event=>{this.updateListAndSelectedOption(event.target.value)})),this.control?.control?this.value=this.control.control.value:this.inputElement?.value&&(this.value=this.inputElement.value)}ngAfterContentInit(){this.control?.control&&this.control.control.valueChanges.pipe((0,takeUntil.R)(this.destroy$)).subscribe({next:value=>{this.updateListAndSelectedOption(value)}}),this.clickOutsideListener=this.renderer.listen(window,"click",(event=>{this.inputElement.contains(event.target)||this.document.getElementById("autocompleteList")?.contains(event.target)||this.closeAutocompletePanel()}))}highLightSelectedOption(){this.getNotGroupOptionList().forEach((option=>{(0,lodash.isEqual)(this.value,option.value)?option.selected=!0:option.selected=!1}))}filterAutocompleteOptions(searchText){this.getNotGroupOptionList().forEach((option=>{(option.label&&""!==option.label?option.label:this.getOptionValue(option)).toLowerCase().includes(searchText.toLowerCase())?option.display=!0:option.display=!1})),this.getGroupOptionList().forEach((option=>{const checkValue=option.label&&""!==option.label?option.label:this.getOptionValue(option),childOptions=option.options.toArray();checkValue.toLowerCase().includes(searchText.toLowerCase())?(option.display=!0,childOptions.forEach((option=>option.display=!0))):childOptions.every((option=>!option.display))?option.display=!1:option.display=!0}))}updateListAndSelectedOption(value){this.value&&!(0,lodash.isEqual)(this.getOptionValue({value:this.value}),this.inputElement.value)&&(this.value=null,this.highLightSelectedOption()),this.autocompletePanel.openPanel&&this.filterAutocompleteOptions(value)}openAutocompletePanel(){this.autocompletePanel.openPanel=!0,""!==this.inputElement.value&&this.inputElement.value&&this.highLightSelectedOption(),this.filterAutocompleteOptions(this.inputElement.value),this.overlayRef=this.overlay.create({hasBackdrop:!1,scrollStrategy:"close"===this.scrollStrategy?this.overlay.scrollStrategies.close():this.overlay.scrollStrategies.block(),positionStrategy:this.overlay.position().flexibleConnectedTo(this.inputElement.parentElement??this.inputElement).withPositions([{originX:"start",originY:"bottom",overlayX:"start",overlayY:"top",offsetX:0,offsetY:0}]),minWidth:this.inputElement.parentElement?.clientWidth&&0!==this.inputElement.parentElement?.clientWidth?this.inputElement.parentElement?.clientWidth:this.inputElement.clientWidth});const templatePortal=new portal.UE(this.autocompletePanel.templateRef,this.viewContainerRef);this.overlayRef.attach(templatePortal),setTimeout((()=>{this.applyAutocompleteDisplayAnimation(!0)}),0),this.autocompleteClosingActionsSubscription=this.autocompleteClosingActions().subscribe((()=>this.closeAutocompletePanel())),this.selectOptionListener&&this.selectOptionListener(),this.selectOptionListener=this.renderer.listen(this.document.getElementById("autocompleteList"),"click",(event=>{if(!JSON.parse(event.target.getAttribute("data-is-group"))){const optionValue=JSON.parse(event.target.getAttribute("data-value")),isSelected=JSON.parse(event.target.getAttribute("data-selected"));this.value=isSelected?optionValue:null,this.control?.control&&this.control.control.setValue(this.value,{emitEvent:!1}),this.inputElement.value=event.target.getAttribute("data-label")||this.value,this.optionSelected.emit(this.value),this.closeAutocompletePanel()}})),this.opened.emit()}closeAutocompletePanel(){this.overlayRef&&this.autocompletePanel.openPanel&&(this.autocompleteClosingActionsSubscription.unsubscribe(),this.autocompletePanel.openPanel=!1,this.closed.emit(),this.applyAutocompleteDisplayAnimation(!1),setTimeout((()=>{this.overlayRef.detach()}),100))}autocompleteClosingActions(){const detachment$=this.overlayRef.detachments();return(0,merge.T)(detachment$)}applyAutocompleteDisplayAnimation(toDisplay){const autocompleteList=this.overlayRef.overlayElement.querySelector("div");toDisplay?(this.renderer.addClass(autocompleteList,"translate-y-0"),this.renderer.addClass(autocompleteList,"opacity-100")):(this.renderer.removeClass(autocompleteList,"translate-y-0"),this.renderer.removeClass(autocompleteList,"opacity-100"))}ngOnDestroy(){this.inputEventListener&&this.inputEventListener(),this.selectOptionListener&&this.selectOptionListener(),this.clickOutsideListener&&this.clickOutsideListener(),this.destroy$.next(),this.destroy$.complete()}},_class.ctorParameters=()=>[{type:fesm2020_forms.a5,decorators:[{type:core.Self},{type:core.Optional}]},{type:core.ElementRef},{type:core.Renderer2},{type:core.ViewContainerRef},{type:overlay.aV},{type:Document,decorators:[{type:core.Inject,args:[common.DOCUMENT]}]}],_class.propDecorators={autocompletePanel:[{type:core.Input,args:["uiAutocomplete"]}],autocompleteDisplayKey:[{type:core.Input}],scrollStrategy:[{type:core.Input}],opened:[{type:core.Output}],closed:[{type:core.Output}],optionSelected:[{type:core.Output}],onClick:[{type:core.HostListener,args:["click"]}]},_class);AutocompleteDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[uiAutocomplete]"}),(0,tslib_es6.w6)("design:paramtypes",[fesm2020_forms.a5,core.ElementRef,core.Renderer2,core.ViewContainerRef,overlay.aV,Document])],AutocompleteDirective);var option_component=__webpack_require__("./libs/ui/src/lib/autocomplete/components/option.component.ts");let OptionModule=class OptionModule{};OptionModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[option_component.x],imports:[common.CommonModule],exports:[option_component.x]})],OptionModule);let AutocompleteModule=class AutocompleteModule{};AutocompleteModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[AutocompleteDirective,autocomplete_component.Y],imports:[common.CommonModule,OptionModule],exports:[AutocompleteDirective,autocomplete_component.Y,OptionModule]})],AutocompleteModule)},"./libs/ui/src/lib/select-menu/components/select-option.module.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>SelectOptionModule});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),_select_option_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/ui/src/lib/select-menu/components/select-option.component.ts");let SelectOptionModule=class SelectOptionModule{};SelectOptionModule=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({declarations:[_select_option_component__WEBPACK_IMPORTED_MODULE_0__.Z],imports:[_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule],exports:[_select_option_component__WEBPACK_IMPORTED_MODULE_0__.Z]})],SelectOptionModule)},"./libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{OutlineFalse:()=>OutlineFalse,OutlineFalseAutocomplete:()=>OutlineFalseAutocomplete,OutlineFalseSelect:()=>OutlineFalseSelect,OutlineTrue:()=>OutlineTrue,OutlineTrueAutocomplete:()=>OutlineTrueAutocomplete,OutlineTrueSelect:()=>OutlineTrueSelect,default:()=>form_wrapper_component_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),form_wrapper_directive=__webpack_require__("./libs/ui/src/lib/form-wrapper/form-wrapper.directive.ts"),prefix_directive=__webpack_require__("./libs/ui/src/lib/form-wrapper/prefix.directive.ts"),suffix_directive=__webpack_require__("./libs/ui/src/lib/form-wrapper/suffix.directive.ts");let FormWrapperModule=class FormWrapperModule{};FormWrapperModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[form_wrapper_directive.I,prefix_directive.p,suffix_directive.M],imports:[common.CommonModule],exports:[form_wrapper_directive.I,prefix_directive.p,suffix_directive.M]})],FormWrapperModule);var icon_module=__webpack_require__("./libs/ui/src/lib/icon/icon.module.ts"),spinner_module=__webpack_require__("./libs/ui/src/lib/spinner/spinner.module.ts"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),select_menu_component=__webpack_require__("./libs/ui/src/lib/select-menu/select-menu.component.ts"),select_option_module=__webpack_require__("./libs/ui/src/lib/select-menu/components/select-option.module.ts"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs");let SelectMenuModule=class SelectMenuModule{};SelectMenuModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[select_menu_component.d],imports:[common.CommonModule,fesm2020_forms.UX,select_option_module.l,ngx_translate_core.aw,icon_module.Q],exports:[select_menu_component.d,select_option_module.l]})],SelectMenuModule);var autocomplete_module=__webpack_require__("./libs/ui/src/lib/autocomplete/autocomplete.module.ts"),button_module=__webpack_require__("./libs/ui/src/lib/button/button.module.ts");const form_wrapper_component_stories={title:"Form Wrapper",decorators:[(0,dist.moduleMetadata)({imports:[common.CommonModule,FormWrapperModule,icon_module.Q,spinner_module.F,SelectMenuModule,autocomplete_module.I,button_module.h,fesm2020_forms.UX]})]},options=["french","spanish","english","japanese","javanese","chinese"],formControl=new fesm2020_forms.cw({name:new fesm2020_forms.NI("")}),toggleDisabled=()=>{formControl.disabled?formControl.enable():formControl.disable()},Template=args=>({template:`<div uiFormFieldDirective [outline]="${args.outline}">\n    <label>Phone Number</label>\n    <input type="text" name="account-number" id="account-number" placeholder="000-00-0000"/>\n    <ui-spinner [size]="'medium'" uiSuffix></ui-spinner>\n    <ui-icon icon="search" uiPrefix></ui-icon>\n  </div>`,props:{...args}}),TemplateSelect=args=>({template:`<div uiFormFieldDirective [outline]="${args.outline}">\n    <label>Choose language</label>\n    <ui-select-menu \n      [multiselect]="false"\n      [disabled]="false">\n        <ui-select-option *ngFor="let option of options" [value]="option">\n          {{option}}\n        </ui-select-option>\n    </ui-select-menu>\n    <ui-spinner [size]="'medium'" uiSuffix></ui-spinner>\n    <ui-icon icon="search" uiPrefix></ui-icon>\n  </div>`,props:{...args,options}}),TemplateAutocomplete=args=>({template:`\n    <div [formGroup]="formControl">\n      <div uiFormFieldDirective  [outline]="${args.outline}">\n        <label>Choose language</label>\n        <input\n          formControlName="name"\n          type="text"\n          placeholder="Select a value"\n          [uiAutocomplete]="auto"\n          (optionSelected)="selectedOption($event)"\n        >\n        <ui-autocomplete #auto>\n          <ui-option *ngFor="let option of options" [value]="option">\n            {{option}}\n            <ng-container ngProjectsAs="icon">\n              <ui-icon\n                [icon]="'edit'"\n                [size]="18"\n              ></ui-icon>\n            </ng-container>\n          </ui-option>\n        </ui-autocomplete>\n        <ui-spinner [size]="'medium'" uiSuffix></ui-spinner>\n        <ui-icon icon="search" uiPrefix></ui-icon>\n    </div>\n  </div>\n  <ui-button (click)="toggleDisabled()">\n    Enable/disabled\n  </ui-button>\n  `,props:{...args,options,toggleDisabled,formControl}}),OutlineFalseAutocomplete=TemplateAutocomplete.bind({});OutlineFalseAutocomplete.args={outline:!1};const OutlineTrueAutocomplete=TemplateAutocomplete.bind({});OutlineTrueAutocomplete.args={outline:!0};const OutlineFalseSelect=TemplateSelect.bind({});OutlineFalseSelect.args={outline:!1};const OutlineTrueSelect=TemplateSelect.bind({});OutlineTrueSelect.args={outline:!0};const OutlineFalse=Template.bind({});OutlineFalse.args={outline:!1};const OutlineTrue=Template.bind({});OutlineTrue.args={outline:!0}}}]);