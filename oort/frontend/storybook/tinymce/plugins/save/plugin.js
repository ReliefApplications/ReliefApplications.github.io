!function(){"use strict";var global$2=tinymce.util.Tools.resolve("tinymce.PluginManager"),global$1=tinymce.util.Tools.resolve("tinymce.dom.DOMUtils"),global=tinymce.util.Tools.resolve("tinymce.util.Tools"),enableWhenDirty=function(editor){return editor.getParam("save_enablewhendirty",!0)},displayErrorMessage=function(editor,message){editor.notificationManager.open({text:message,type:"error"})},register$1=function(editor){editor.addCommand("mceSave",(function(){!function(editor){var formObj=global$1.DOM.getParent(editor.id,"form");if(!enableWhenDirty(editor)||editor.isDirty()){if(editor.save(),function(editor){return!!editor.getParam("save_onsavecallback")}(editor))return editor.execCallback("save_onsavecallback",editor),void editor.nodeChanged();formObj?(editor.setDirty(!1),formObj.onsubmit&&!formObj.onsubmit()||("function"==typeof formObj.submit?formObj.submit():displayErrorMessage(editor,"Error: Form submit field collision.")),editor.nodeChanged()):displayErrorMessage(editor,"Error: No form element found.")}}(editor)})),editor.addCommand("mceCancel",(function(){!function(editor){var h=global.trim(editor.startContent);!function(editor){return!!editor.getParam("save_oncancelcallback")}(editor)?editor.resetContent(h):editor.execCallback("save_oncancelcallback",editor)}(editor)}))},stateToggle=function(editor){return function(api){var handler=function(){api.setDisabled(enableWhenDirty(editor)&&!editor.isDirty())};return handler(),editor.on("NodeChange dirty",handler),function(){return editor.off("NodeChange dirty",handler)}}};!function Plugin(){global$2.add("save",(function(editor){!function(editor){editor.ui.registry.addButton("save",{icon:"save",tooltip:"Save",disabled:!0,onAction:function(){return editor.execCommand("mceSave")},onSetup:stateToggle(editor)}),editor.ui.registry.addButton("cancel",{icon:"cancel",tooltip:"Cancel",disabled:!0,onAction:function(){return editor.execCommand("mceCancel")},onSetup:stateToggle(editor)}),editor.addShortcut("Meta+S","","mceSave")}(editor),register$1(editor)}))}()}();