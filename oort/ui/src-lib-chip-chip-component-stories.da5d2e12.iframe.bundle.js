"use strict";(self.webpackChunkoort_front=self.webpackChunkoort_front||[]).push([[3377],{"./libs/ui/src/lib/types/variant.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>variants});const variants=["default","primary","success","danger","grey","light","warning"]},"./libs/ui/src/lib/chip/chip.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChipVariants:()=>ChipVariants,ChipWithInput:()=>ChipWithInput,default:()=>chip_component_stories});var _class,dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),chip_component=__webpack_require__("./libs/ui/src/lib/chip/chip.component.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),chip_list_directive=__webpack_require__("./libs/ui/src/lib/chip/chip-list.directive.ts"),form_wrapper_directive=__webpack_require__("./libs/ui/src/lib/form-wrapper/form-wrapper.directive.ts");let ChipInputDirective=((_class=class ChipInputDirective{constructor(formWrapperDirective,renderer,elementRef){this.formWrapperDirective=formWrapperDirective,this.renderer=renderer,this.elementRef=elementRef,this.chipInputSeparatorKeyCodes=[],this.chipTokenEnd=new core.EventEmitter,this.wrapperDivClasses=["border-solid","rounded-md","border","border-gray-200","px-1","py-2","gap-1","flex","w-full","flex-wrap"]}ngAfterContentInit(){this.setWrapperDiv(),this.inputListener=this.renderer.listen(this.elementRef.nativeElement,"keydown",(event=>{const inputValue=this.elementRef.nativeElement.value;if(this.chipInputSeparatorKeyCodes.includes(event.keyCode)){if(event.preventDefault(),inputValue.trim()){const newChip=inputValue.replace(new RegExp(event.keyCode),"");this.chipTokenEnd.emit(newChip)}this.elementRef.nativeElement.value=""}}))}setWrapperDiv(){const wrapper=this.renderer.createElement("div"),parent=this.elementRef.nativeElement.parentNode;this.renderer.addClass(this.elementRef.nativeElement,"flex-1"),this.formWrapperDirective||(this.renderer.insertBefore(parent,wrapper,this.elementRef.nativeElement),this.renderer.appendChild(wrapper,this.chipList),this.renderer.appendChild(wrapper,this.elementRef.nativeElement)),this.renderer.addClass(this.chipList,"flex"),this.renderer.addClass(this.chipList,"flex-wrap"),this.renderer.addClass(this.chipList,"gap-1"),this.wrapperDivClasses.forEach((divClass=>{this.renderer.addClass(wrapper,divClass)}))}ngOnDestroy(){this.inputListener&&this.inputListener()}}).ctorParameters=()=>[{type:form_wrapper_directive.I,decorators:[{type:core.Optional}]},{type:core.Renderer2},{type:core.ElementRef}],_class.propDecorators={chipList:[{type:core.Input,args:["uiChipListFor"]}],chipInputSeparatorKeyCodes:[{type:core.Input}],chipTokenEnd:[{type:core.Output}]},_class);ChipInputDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[uiChipListFor]"}),(0,tslib_es6.w6)("design:paramtypes",[form_wrapper_directive.I,core.Renderer2,core.ElementRef])],ChipInputDirective);var icon_module=__webpack_require__("./libs/ui/src/lib/icon/icon.module.ts");let ChipModule=class ChipModule{};ChipModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[chip_component.Y,chip_list_directive.j,ChipInputDirective],imports:[common.CommonModule,icon_module.Q],exports:[chip_component.Y,chip_list_directive.j,ChipInputDirective]})],ChipModule);var variant=__webpack_require__("./libs/ui/src/lib/types/variant.ts"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),keycodes=__webpack_require__("./node_modules/@angular/cdk/fesm2020/keycodes.mjs");const chip_component_stories={title:"Chip",component:chip_component.Y,argTypes:{variant:{defaultValue:"default",options:variant.o,control:{type:"select"}},removable:{defaultValue:!1,type:"boolean"},disabled:{defaultValue:!1,type:"boolean"}},decorators:[(0,dist.moduleMetadata)({imports:[ChipModule,fesm2020_forms.UX]})]};let statuses=["Active","Pending","Archived"];const formControl=new fesm2020_forms.NI,removeStatus=index=>{statuses.splice(index,1)},addChipsFromInput=chips=>{chips instanceof Array?statuses=statuses.concat([...chips]):statuses.push(chips),formControl.setValue(statuses)},separatorKeysCodes=[keycodes.K5,keycodes.OC],ChipVariants=(args=>({component:chip_component.Y,template:'\n      <div class="flex gap-1">\n        <ui-chip variant="default" [removable]="true"> Default </ui-chip>\n        <ui-chip variant="primary" [removable]="true"> Primary </ui-chip>\n        <ui-chip variant="success" [removable]="true"> Success </ui-chip>\n        <ui-chip variant="danger" [removable]="true"> Danger </ui-chip>\n        <ui-chip variant="danger" [removable]="true" [disabled]="true"> Disabled </ui-chip>\n      </div>\n    ',props:{...args}})).bind({}),ChipWithInput=(args=>({component:chip_component.Y,template:`\n      <div uiChipList [formControl]="formControl" #chipList>\n        <ui-chip\n          [removable]="${args.removable}"\n          [disabled]="${args.disabled}"\n          [variant]="'${args.variant}'"\n          [value]="status"\n          *ngFor="let status of statuses; let i = index"\n          (removed)="removeStatus(i)"\n        >\n          {{ status }}\n        </ui-chip>\n      </div>\n      <input\n        placeholder="New status..."\n        [uiChipListFor]="chipList"\n        [chipInputSeparatorKeyCodes]="separatorKeysCodes"\n        (chipTokenEnd)="addChipsFromInput($event)"\n        >\n        <br>\n        <p>value: <span *ngFor="let val of formControl.value;let last = last">{{val}} <span *ngIf="!last">, </span></span></p>\n        <p>touched: {{formControl.touched}}</p>\n        `,props:{...args,statuses,formControl,removeStatus,addChipsFromInput,separatorKeysCodes}})).bind({});ChipWithInput.args={removable:!0,variant:"default",disabled:!1}}}]);